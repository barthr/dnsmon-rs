// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("dns_bpf")
            .map("bl_hostnames", false)
            .map("dns_events", false)
            .map("log_output", false)
            .map("dns_bpf.rodata", false)
            .prog("dns");
        builder.build()
    }
    pub struct OpenDnsMaps<'obj> {
        pub bl_hostnames: libbpf_rs::OpenMapMut<'obj>,
        pub dns_events: libbpf_rs::OpenMapMut<'obj>,
        pub log_output: libbpf_rs::OpenMapMut<'obj>,
        pub rodata: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenDnsMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut bl_hostnames = None;
            let mut dns_events = None;
            let mut log_output = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "bl_hostnames" => bl_hostnames = Some(map),
                    "dns_events" => dns_events = Some(map),
                    "log_output" => log_output = Some(map),
                    "dns_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                bl_hostnames: bl_hostnames.expect("map `bl_hostnames` not present"),
                dns_events: dns_events.expect("map `dns_events` not present"),
                log_output: log_output.expect("map `log_output` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct DnsMaps<'obj> {
        pub bl_hostnames: libbpf_rs::MapMut<'obj>,
        pub dns_events: libbpf_rs::MapMut<'obj>,
        pub log_output: libbpf_rs::MapMut<'obj>,
        pub rodata: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> DnsMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut bl_hostnames = None;
            let mut dns_events = None;
            let mut log_output = None;
            let mut rodata = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "bl_hostnames" => bl_hostnames = Some(map),
                    "dns_events" => dns_events = Some(map),
                    "log_output" => log_output = Some(map),
                    "dns_bpf.rodata" => rodata = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                bl_hostnames: bl_hostnames.expect("map `bl_hostnames` not present"),
                dns_events: dns_events.expect("map `dns_events` not present"),
                log_output: log_output.expect("map `log_output` not present"),
                rodata: rodata.expect("map `rodata` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenDnsProgs<'obj> {
        pub dns: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenDnsProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut dns = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "dns" => dns = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                dns: dns.expect("prog `dns` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct DnsProgs<'obj> {
        pub dns: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> DnsProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenDnsProgs<'obj>) -> Self {
            Self {
                dns: unsafe {
                    libbpf_rs::ProgramMut::new_mut(open_progs.dns.as_libbpf_object().as_mut())
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct DnsSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> DnsSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenDnsSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenDnsSkel {
                maps: unsafe { OpenDnsMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenDnsProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for DnsSkelBuilder {
        type Output = OpenDnsSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenDnsSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenDnsSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 30],
            pub value: *mut u32,
            pub max_entries: *mut [i32; 1000000],
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_2 {
            pub r#type: *mut [i32; 27],
            pub max_entries: *mut [i32; 512],
            pub pinning: *mut [i32; 1],
        }
        impl Default for __anon_2 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    pinning: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_3 {
            pub r#type: *mut [i32; 27],
            pub max_entries: *mut [i32; 100000],
        }
        impl Default for __anon_3 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct __sk_buff {
            pub len: u32,
            pub pkt_type: u32,
            pub mark: u32,
            pub queue_mapping: u32,
            pub protocol: u32,
            pub vlan_present: u32,
            pub vlan_tci: u32,
            pub vlan_proto: u32,
            pub priority: u32,
            pub ingress_ifindex: u32,
            pub ifindex: u32,
            pub tc_index: u32,
            pub cb: [u32; 5],
            pub hash: u32,
            pub tc_classid: u32,
            pub data: u32,
            pub data_end: u32,
            pub napi_id: u32,
            pub family: u32,
            pub remote_ip4: u32,
            pub local_ip4: u32,
            pub remote_ip6: [u32; 4],
            pub local_ip6: [u32; 4],
            pub remote_port: u32,
            pub local_port: u32,
            pub data_meta: u32,
            pub __anon_4: __anon_4,
            pub tstamp: u64,
            pub wire_len: u32,
            pub gso_segs: u32,
            pub __anon_5: __anon_5,
            pub gso_size: u32,
            pub tstamp_type: u8,
            pub hwtstamp: u64,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_4 {
            pub flow_keys: *mut std::ffi::c_void,
        }
        impl std::fmt::Debug for __anon_4 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_4 {
            fn default() -> Self {
                Self {
                    flow_keys: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_5 {
            pub sk: *mut std::ffi::c_void,
        }
        impl std::fmt::Debug for __anon_5 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_5 {
            fn default() -> Self {
                Self {
                    sk: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct ethhdr {
            pub h_dest: [u8; 6],
            pub h_source: [u8; 6],
            pub h_proto: u16,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct iphdr {
            pub __pad_0: [u8; 1],
            pub tos: u8,
            pub tot_len: u16,
            pub id: u16,
            pub frag_off: u16,
            pub ttl: u8,
            pub protocol: u8,
            pub check: u16,
            pub __anon_6: __anon_6,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_6 {
            pub __anon_7: __anon_7,
            pub addrs: __anon_7,
        }
        impl std::fmt::Debug for __anon_6 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_6 {
            fn default() -> Self {
                Self {
                    __anon_7: __anon_7::default(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_7 {
            pub saddr: u32,
            pub daddr: u32,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct udphdr {
            pub source: u16,
            pub dest: u16,
            pub len: u16,
            pub check: u16,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_8 {
            pub pos: *mut std::ffi::c_void,
            pub end: *mut std::ffi::c_void,
        }
        impl Default for __anon_8 {
            fn default() -> Self {
                Self {
                    pos: std::ptr::null_mut(),
                    end: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_9 {
            pub pid: u32,
            pub hostname: [i8; 256],
        }
        impl Default for __anon_9 {
            fn default() -> Self {
                Self {
                    pid: u32::default(),
                    hostname: [i8::default(); 256],
                }
            }
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub bl_hostnames: __anon_1,
            pub dns_events: __anon_2,
            pub log_output: __anon_3,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }
    pub struct OpenDnsSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenDnsMaps<'obj>,
        pub progs: OpenDnsProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenDnsSkel<'obj> {
        type Output = DnsSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<DnsSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(DnsSkel {
                maps: unsafe { DnsMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: DnsProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: DnsLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct DnsLinks {
        pub dns: Option<libbpf_rs::Link>,
    }
    pub struct DnsSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: DnsMaps<'obj>,
        pub progs: DnsProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: DnsLinks,
    }

    unsafe impl Send for DnsSkel<'_> {}
    unsafe impl Sync for DnsSkel<'_> {}

    impl<'obj> Skel<'obj> for DnsSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = DnsLinks {
                dns: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl DnsSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 12, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 46, 116, 101, 120, 116, 0, 116, 99, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109,
        97, 112, 115, 0, 46, 114, 111, 100, 97, 116, 97, 0, 100, 110, 115, 46, 98, 112, 102, 46,
        99, 0, 76, 66, 66, 48, 95, 50, 52, 0, 95, 112, 97, 114, 115, 101, 95, 100, 110, 115, 113,
        95, 104, 111, 115, 116, 110, 97, 109, 101, 0, 76, 66, 66, 48, 95, 50, 48, 0, 76, 66, 66,
        48, 95, 49, 57, 0, 100, 110, 115, 46, 95, 95, 95, 95, 102, 109, 116, 0, 76, 66, 66, 48, 95,
        49, 56, 0, 76, 66, 66, 48, 95, 50, 50, 0, 100, 110, 115, 46, 95, 95, 95, 95, 102, 109, 116,
        46, 49, 0, 100, 110, 115, 46, 95, 95, 95, 102, 109, 116, 46, 50, 0, 76, 66, 66, 48, 95, 50,
        51, 0, 100, 110, 115, 46, 95, 95, 95, 102, 109, 116, 0, 76, 66, 66, 49, 95, 51, 0, 95, 112,
        97, 114, 115, 101, 95, 100, 110, 115, 113, 95, 104, 111, 115, 116, 110, 97, 109, 101, 46,
        95, 95, 95, 95, 102, 109, 116, 0, 76, 66, 66, 49, 95, 50, 0, 76, 66, 66, 49, 95, 52, 0, 76,
        66, 66, 49, 95, 54, 0, 76, 66, 66, 49, 95, 49, 49, 0, 76, 66, 66, 49, 95, 57, 0, 76, 66,
        66, 49, 95, 49, 48, 0, 76, 66, 66, 49, 95, 49, 50, 0, 95, 112, 97, 114, 115, 101, 95, 100,
        110, 115, 113, 95, 104, 111, 115, 116, 110, 97, 109, 101, 46, 95, 95, 95, 95, 102, 109,
        116, 46, 51, 0, 100, 110, 115, 0, 98, 108, 95, 104, 111, 115, 116, 110, 97, 109, 101, 115,
        0, 100, 110, 115, 95, 101, 118, 101, 110, 116, 115, 0, 108, 111, 103, 95, 111, 117, 116,
        112, 117, 116, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108, 46, 116, 101, 120, 116,
        0, 46, 114, 101, 108, 116, 99, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0,
        4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 4, 0, 72, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 66, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 1, 0, 0, 0, 0, 0, 0, 87, 0,
        0, 0, 0, 0, 4, 0, 88, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 4, 0,
        216, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 1, 0, 7, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 0, 0, 4, 0, 112, 4, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 123, 0, 0, 0, 0, 0, 4, 0, 136, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 131, 0, 0, 0, 1, 0, 7, 0, 89, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 145, 0, 0,
        0, 1, 0, 7, 0, 136, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 4, 0,
        32, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 1, 0, 7, 0, 47, 0, 0, 0, 0,
        0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 177, 0, 0, 0, 0, 0, 3, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 1, 0, 7, 0, 183, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0,
        0, 213, 0, 0, 0, 0, 0, 3, 0, 160, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0,
        0, 0, 0, 3, 0, 104, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 227, 0, 0, 0, 0, 0, 3, 0,
        144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 3, 0, 200, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 3, 0, 16, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 3, 0, 40, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 0, 0, 0, 3, 0, 208, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 0, 0,
        1, 0, 7, 0, 218, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 1, 0, 0, 18, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 88, 5, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 17, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0,
        0, 0, 0, 0, 57, 1, 0, 0, 17, 0, 6, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 68,
        1, 0, 0, 17, 0, 6, 0, 48, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 79, 1, 0, 0, 17, 0,
        5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 121, 21, 0, 0, 0, 0, 0, 0, 191, 84,
        0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 1, 0, 0, 0, 121, 16, 8, 0, 0, 0, 0, 0, 61, 64, 3, 0, 0, 0, 0,
        0, 24, 1, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 44, 0, 0, 0, 0, 0, 24, 0, 0, 0,
        197, 157, 28, 129, 0, 0, 0, 0, 0, 0, 0, 0, 99, 3, 0, 0, 0, 0, 0, 0, 123, 65, 0, 0, 0, 0, 0,
        0, 183, 4, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 4, 0, 0, 0, 113, 85, 0, 0, 0, 0, 0, 0, 103, 5, 0,
        0, 56, 0, 0, 0, 199, 5, 0, 0, 56, 0, 0, 0, 5, 0, 27, 0, 0, 0, 0, 0, 113, 7, 0, 0, 0, 0, 0,
        0, 21, 7, 37, 0, 0, 0, 0, 0, 123, 97, 0, 0, 0, 0, 0, 0, 191, 39, 0, 0, 0, 0, 0, 0, 15, 71,
        0, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 191, 86, 0, 0, 0, 0, 0, 0, 103, 6, 0, 0, 32, 0,
        0, 0, 119, 6, 0, 0, 32, 0, 0, 0, 85, 6, 6, 0, 0, 0, 0, 0, 183, 6, 0, 0, 46, 0, 0, 0, 115,
        103, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 56, 0, 0, 0, 199, 0, 0, 0, 56, 0, 0, 0, 191, 5, 0, 0,
        0, 0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 115, 7, 0, 0, 0, 0, 0, 0, 7, 5, 0, 0, 255, 255, 255,
        255, 191, 6, 0, 0, 0, 0, 0, 0, 97, 48, 0, 0, 0, 0, 0, 0, 175, 96, 0, 0, 0, 0, 0, 0, 39, 0,
        0, 0, 147, 1, 0, 1, 99, 3, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0,
        0, 0, 0, 0, 7, 4, 0, 0, 1, 0, 0, 0, 21, 4, 13, 0, 128, 0, 0, 0, 121, 16, 0, 0, 0, 0, 0, 0,
        191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 1, 0, 0, 0, 121, 23, 8, 0, 0, 0, 0, 0, 61, 103, 224,
        255, 0, 0, 0, 0, 24, 1, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 35, 0, 0,
        0, 133, 0, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
        1, 0, 0, 0, 0, 0, 191, 64, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 97, 18, 76, 0, 0, 0,
        0, 0, 97, 17, 80, 0, 0, 0, 0, 0, 123, 26, 248, 255, 0, 0, 0, 0, 191, 35, 0, 0, 0, 0, 0, 0,
        7, 3, 0, 0, 14, 0, 0, 0, 45, 19, 163, 0, 0, 0, 0, 0, 21, 2, 162, 0, 0, 0, 0, 0, 105, 36,
        12, 0, 0, 0, 0, 0, 85, 4, 160, 0, 8, 0, 0, 0, 191, 36, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 34, 0,
        0, 0, 45, 20, 157, 0, 0, 0, 0, 0, 21, 3, 156, 0, 0, 0, 0, 0, 113, 51, 9, 0, 0, 0, 0, 0, 85,
        3, 154, 0, 17, 0, 0, 0, 191, 35, 0, 0, 0, 0, 0, 0, 7, 3, 0, 0, 42, 0, 0, 0, 45, 19, 151, 0,
        0, 0, 0, 0, 21, 4, 150, 0, 0, 0, 0, 0, 105, 68, 2, 0, 0, 0, 0, 0, 85, 4, 148, 0, 0, 53, 0,
        0, 191, 36, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 54, 0, 0, 0, 45, 20, 145, 0, 0, 0, 0, 0, 123, 74,
        240, 255, 0, 0, 0, 0, 21, 3, 143, 0, 0, 0, 0, 0, 113, 33, 44, 0, 0, 0, 0, 0, 87, 1, 0, 0,
        1, 0, 0, 0, 85, 1, 140, 0, 0, 0, 0, 0, 113, 33, 46, 0, 0, 0, 0, 0, 113, 34, 47, 0, 0, 0, 0,
        0, 103, 2, 0, 0, 8, 0, 0, 0, 79, 18, 0, 0, 0, 0, 0, 0, 21, 2, 135, 0, 0, 0, 0, 0, 183, 1,
        0, 0, 0, 0, 0, 0, 99, 26, 232, 255, 0, 0, 0, 0, 99, 26, 228, 255, 0, 0, 0, 0, 99, 26, 224,
        255, 0, 0, 0, 0, 99, 26, 220, 255, 0, 0, 0, 0, 99, 26, 216, 255, 0, 0, 0, 0, 99, 26, 212,
        255, 0, 0, 0, 0, 99, 26, 208, 255, 0, 0, 0, 0, 99, 26, 204, 255, 0, 0, 0, 0, 99, 26, 200,
        255, 0, 0, 0, 0, 99, 26, 196, 255, 0, 0, 0, 0, 99, 26, 192, 255, 0, 0, 0, 0, 99, 26, 188,
        255, 0, 0, 0, 0, 99, 26, 184, 255, 0, 0, 0, 0, 99, 26, 180, 255, 0, 0, 0, 0, 99, 26, 176,
        255, 0, 0, 0, 0, 99, 26, 172, 255, 0, 0, 0, 0, 99, 26, 168, 255, 0, 0, 0, 0, 99, 26, 164,
        255, 0, 0, 0, 0, 99, 26, 160, 255, 0, 0, 0, 0, 99, 26, 156, 255, 0, 0, 0, 0, 99, 26, 152,
        255, 0, 0, 0, 0, 99, 26, 148, 255, 0, 0, 0, 0, 99, 26, 144, 255, 0, 0, 0, 0, 99, 26, 140,
        255, 0, 0, 0, 0, 99, 26, 136, 255, 0, 0, 0, 0, 99, 26, 132, 255, 0, 0, 0, 0, 99, 26, 128,
        255, 0, 0, 0, 0, 99, 26, 124, 255, 0, 0, 0, 0, 99, 26, 120, 255, 0, 0, 0, 0, 99, 26, 116,
        255, 0, 0, 0, 0, 99, 26, 112, 255, 0, 0, 0, 0, 99, 26, 108, 255, 0, 0, 0, 0, 99, 26, 104,
        255, 0, 0, 0, 0, 99, 26, 100, 255, 0, 0, 0, 0, 99, 26, 96, 255, 0, 0, 0, 0, 99, 26, 92,
        255, 0, 0, 0, 0, 99, 26, 88, 255, 0, 0, 0, 0, 99, 26, 84, 255, 0, 0, 0, 0, 99, 26, 80, 255,
        0, 0, 0, 0, 99, 26, 76, 255, 0, 0, 0, 0, 99, 26, 72, 255, 0, 0, 0, 0, 99, 26, 68, 255, 0,
        0, 0, 0, 99, 26, 64, 255, 0, 0, 0, 0, 99, 26, 60, 255, 0, 0, 0, 0, 99, 26, 56, 255, 0, 0,
        0, 0, 99, 26, 52, 255, 0, 0, 0, 0, 99, 26, 48, 255, 0, 0, 0, 0, 99, 26, 44, 255, 0, 0, 0,
        0, 99, 26, 40, 255, 0, 0, 0, 0, 99, 26, 36, 255, 0, 0, 0, 0, 99, 26, 32, 255, 0, 0, 0, 0,
        99, 26, 28, 255, 0, 0, 0, 0, 99, 26, 24, 255, 0, 0, 0, 0, 99, 26, 20, 255, 0, 0, 0, 0, 99,
        26, 16, 255, 0, 0, 0, 0, 99, 26, 12, 255, 0, 0, 0, 0, 99, 26, 8, 255, 0, 0, 0, 0, 99, 26,
        4, 255, 0, 0, 0, 0, 99, 26, 0, 255, 0, 0, 0, 0, 99, 26, 252, 254, 0, 0, 0, 0, 99, 26, 248,
        254, 0, 0, 0, 0, 99, 26, 244, 254, 0, 0, 0, 0, 99, 26, 240, 254, 0, 0, 0, 0, 99, 26, 236,
        254, 0, 0, 0, 0, 183, 2, 0, 0, 1, 0, 0, 0, 99, 42, 232, 254, 0, 0, 0, 0, 99, 26, 228, 254,
        0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 240, 255, 255, 255, 191, 162, 0, 0, 0,
        0, 0, 0, 7, 2, 0, 0, 232, 254, 255, 255, 191, 163, 0, 0, 0, 0, 0, 0, 7, 3, 0, 0, 228, 254,
        255, 255, 133, 16, 0, 0, 255, 255, 255, 255, 103, 0, 0, 0, 32, 0, 0, 0, 119, 0, 0, 0, 32,
        0, 0, 0, 24, 1, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 29, 16, 55, 0, 0, 0, 0,
        0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 228, 254, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 89, 0, 0, 0, 85, 0, 49, 0, 0, 0, 0, 0, 191, 162, 0, 0,
        0, 0, 0, 0, 7, 2, 0, 0, 232, 254, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 183, 3, 0, 0, 4, 1, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 130, 0, 0, 0, 191, 7,
        0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 255, 0, 0,
        0, 183, 3, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 131, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 101, 7,
        4, 0, 255, 255, 255, 255, 85, 6, 19, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 5, 0, 3, 0, 0, 0, 0, 0, 85, 6, 5, 0, 0, 0, 0, 0, 24, 1, 0, 0, 89, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 47, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 5, 0, 24, 0, 0, 0,
        0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 236, 254, 255, 255, 123, 26, 216, 254, 0, 0,
        0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 216, 254, 255, 255, 191, 97, 0, 0, 0, 0, 0,
        0, 183, 2, 0, 0, 255, 0, 0, 0, 24, 3, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 9,
        0, 0, 0, 0, 0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 236, 254, 255, 255, 123, 26, 216,
        254, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 216, 254, 255, 255, 191, 97, 0, 0,
        0, 0, 0, 0, 183, 2, 0, 0, 255, 0, 0, 0, 24, 3, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        183, 5, 0, 0, 8, 0, 0, 0, 133, 0, 0, 0, 165, 0, 0, 0, 191, 97, 0, 0, 0, 0, 0, 0, 183, 2, 0,
        0, 0, 0, 0, 0, 133, 0, 0, 0, 132, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0,
        0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32,
        114, 101, 115, 101, 114, 118, 101, 32, 114, 105, 110, 103, 32, 98, 117, 102, 102, 101, 114,
        32, 102, 111, 114, 32, 108, 111, 103, 32, 109, 101, 115, 115, 97, 103, 101, 10, 0, 70, 97,
        105, 108, 101, 100, 32, 115, 101, 110, 100, 105, 110, 103, 32, 104, 111, 115, 116, 110, 97,
        109, 101, 32, 116, 111, 32, 117, 115, 101, 114, 32, 115, 112, 97, 99, 101, 32, 37, 115, 33,
        0, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 115, 101, 114, 118, 101, 32,
        114, 105, 110, 103, 32, 98, 117, 102, 102, 101, 114, 32, 102, 111, 114, 32, 108, 111, 103,
        32, 109, 101, 115, 115, 97, 103, 101, 10, 0, 83, 117, 99, 99, 101, 115, 102, 117, 108, 108,
        121, 32, 115, 101, 110, 116, 32, 104, 111, 115, 116, 110, 97, 109, 101, 32, 116, 111, 32,
        99, 111, 110, 116, 114, 111, 108, 32, 112, 108, 97, 110, 101, 59, 32, 37, 115, 0, 101, 114,
        114, 111, 114, 58, 32, 98, 111, 117, 110, 100, 97, 114, 121, 32, 111, 102, 32, 112, 97, 99,
        107, 101, 116, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 101, 114, 114, 111, 114, 58,
        32, 98, 111, 117, 110, 100, 97, 114, 121, 32, 111, 102, 32, 112, 97, 99, 107, 101, 116, 32,
        101, 120, 99, 101, 101, 100, 101, 100, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 25,
        0, 0, 0, 144, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 25, 0, 0, 0, 96, 3, 0, 0, 0, 0, 0, 0, 10, 0,
        0, 0, 2, 0, 0, 0, 160, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27, 0, 0, 0, 208, 3, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 28, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 29, 0, 0, 0, 64, 4, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 25, 0, 0, 0, 96, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 25, 0, 0, 0, 192,
        4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 25, 0, 0, 0, 16, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 25, 0,
        0, 0, 159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 104, 8, 0, 0, 104, 8, 0, 0, 30, 9, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 30, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8, 7, 0, 0,
        0, 29, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0,
        0, 0, 64, 66, 15, 0, 0, 0, 0, 0, 3, 0, 0, 4, 24, 0, 0, 0, 48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 53, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 59, 0, 0, 0, 9, 0, 0, 0, 128, 0, 0, 0, 71, 0, 0,
        0, 0, 0, 0, 14, 11, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 14, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 2, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 24, 0, 0, 0, 48, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
        0, 15, 0, 0, 0, 64, 0, 0, 0, 84, 0, 0, 0, 17, 0, 0, 0, 128, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
        14, 19, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
        0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 160, 134, 1, 0, 0, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0,
        48, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 21, 0, 0, 0, 64, 0, 0, 0, 103, 0, 0, 0,
        0, 0, 0, 14, 23, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 26, 0, 0, 0, 114, 0, 0, 0,
        34, 0, 0, 4, 192, 0, 0, 0, 124, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 7, 0, 0, 0,
        32, 0, 0, 0, 137, 0, 0, 0, 7, 0, 0, 0, 64, 0, 0, 0, 142, 0, 0, 0, 7, 0, 0, 0, 96, 0, 0, 0,
        156, 0, 0, 0, 7, 0, 0, 0, 128, 0, 0, 0, 165, 0, 0, 0, 7, 0, 0, 0, 160, 0, 0, 0, 178, 0, 0,
        0, 7, 0, 0, 0, 192, 0, 0, 0, 187, 0, 0, 0, 7, 0, 0, 0, 224, 0, 0, 0, 198, 0, 0, 0, 7, 0, 0,
        0, 0, 1, 0, 0, 207, 0, 0, 0, 7, 0, 0, 0, 32, 1, 0, 0, 223, 0, 0, 0, 7, 0, 0, 0, 64, 1, 0,
        0, 231, 0, 0, 0, 7, 0, 0, 0, 96, 1, 0, 0, 240, 0, 0, 0, 27, 0, 0, 0, 128, 1, 0, 0, 243, 0,
        0, 0, 7, 0, 0, 0, 32, 2, 0, 0, 248, 0, 0, 0, 7, 0, 0, 0, 64, 2, 0, 0, 3, 1, 0, 0, 7, 0, 0,
        0, 96, 2, 0, 0, 8, 1, 0, 0, 7, 0, 0, 0, 128, 2, 0, 0, 17, 1, 0, 0, 7, 0, 0, 0, 160, 2, 0,
        0, 25, 1, 0, 0, 7, 0, 0, 0, 192, 2, 0, 0, 32, 1, 0, 0, 7, 0, 0, 0, 224, 2, 0, 0, 43, 1, 0,
        0, 7, 0, 0, 0, 0, 3, 0, 0, 53, 1, 0, 0, 28, 0, 0, 0, 32, 3, 0, 0, 64, 1, 0, 0, 28, 0, 0, 0,
        160, 3, 0, 0, 74, 1, 0, 0, 7, 0, 0, 0, 32, 4, 0, 0, 86, 1, 0, 0, 7, 0, 0, 0, 64, 4, 0, 0,
        97, 1, 0, 0, 7, 0, 0, 0, 96, 4, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 128, 4, 0, 0, 107, 1, 0, 0,
        31, 0, 0, 0, 192, 4, 0, 0, 114, 1, 0, 0, 7, 0, 0, 0, 0, 5, 0, 0, 123, 1, 0, 0, 7, 0, 0, 0,
        32, 5, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 64, 5, 0, 0, 132, 1, 0, 0, 7, 0, 0, 0, 128, 5, 0, 0,
        141, 1, 0, 0, 35, 0, 0, 0, 160, 5, 0, 0, 153, 1, 0, 0, 31, 0, 0, 0, 192, 5, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,
        0, 0, 0, 7, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 8, 0, 0, 0, 162, 1, 0,
        0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 75, 0, 0, 0, 172, 1, 0, 0, 0, 0, 0, 8,
        32, 0, 0, 0, 178, 1, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 8,
        0, 0, 0, 197, 1, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 74, 0, 0, 0, 200,
        1, 0, 0, 0, 0, 0, 8, 36, 0, 0, 0, 205, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 219, 1, 0, 0, 25, 0, 0, 0, 223, 1, 0, 0, 1, 0, 0, 12, 37, 0,
        0, 0, 227, 1, 0, 0, 3, 0, 0, 4, 14, 0, 0, 0, 234, 1, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 241, 1,
        0, 0, 40, 0, 0, 0, 48, 0, 0, 0, 250, 1, 0, 0, 41, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 0, 0, 0, 36, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 8, 42, 0, 0, 0,
        9, 2, 0, 0, 0, 0, 0, 8, 43, 0, 0, 0, 15, 2, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 16, 0, 0, 0, 30,
        2, 0, 0, 10, 0, 0, 132, 20, 0, 0, 0, 36, 2, 0, 0, 35, 0, 0, 0, 0, 0, 0, 4, 40, 2, 0, 0, 35,
        0, 0, 0, 4, 0, 0, 4, 48, 2, 0, 0, 35, 0, 0, 0, 8, 0, 0, 0, 52, 2, 0, 0, 41, 0, 0, 0, 16, 0,
        0, 0, 60, 2, 0, 0, 41, 0, 0, 0, 32, 0, 0, 0, 63, 2, 0, 0, 41, 0, 0, 0, 48, 0, 0, 0, 72, 2,
        0, 0, 35, 0, 0, 0, 64, 0, 0, 0, 156, 0, 0, 0, 35, 0, 0, 0, 72, 0, 0, 0, 76, 2, 0, 0, 45, 0,
        0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 96, 0, 0, 0, 82, 2, 0, 0, 0, 0, 0, 8, 42, 0, 0,
        0, 0, 0, 0, 0, 2, 0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 90, 2, 0, 0,
        47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 8, 0, 0, 0, 96, 2, 0, 0, 48, 0, 0, 0, 0,
        0, 0, 0, 102, 2, 0, 0, 48, 0, 0, 0, 32, 0, 0, 0, 108, 2, 0, 0, 0, 0, 0, 8, 7, 0, 0, 0, 115,
        2, 0, 0, 4, 0, 0, 4, 8, 0, 0, 0, 122, 2, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 129, 2, 0, 0, 41,
        0, 0, 0, 16, 0, 0, 0, 124, 0, 0, 0, 41, 0, 0, 0, 32, 0, 0, 0, 76, 2, 0, 0, 45, 0, 0, 0, 48,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 51, 0, 0, 0, 134, 2, 0, 0, 0, 0, 0, 8, 52, 0, 0, 0, 0, 0,
        0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 141, 2, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 145, 2, 0, 0, 53, 0,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 55, 0, 0, 0,
        149, 2, 0, 0, 0, 0, 0, 8, 56, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 4, 1, 0, 0, 159, 2, 0, 0, 7,
        0, 0, 0, 0, 0, 0, 0, 163, 2, 0, 0, 58, 0, 0, 0, 32, 0, 0, 0, 172, 2, 0, 0, 0, 0, 0, 1, 1,
        0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 57, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 13, 7, 0, 0, 0, 134, 2, 0, 0,
        50, 0, 0, 0, 177, 2, 0, 0, 54, 0, 0, 0, 243, 0, 0, 0, 59, 0, 0, 0, 180, 2, 0, 0, 0, 0, 0,
        12, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 57, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0,
        201, 2, 0, 0, 0, 0, 0, 14, 62, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 57, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 47, 0, 0, 0, 209, 2, 0, 0, 0,
        0, 0, 14, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 64, 0, 0, 0, 4, 0,
        0, 0, 42, 0, 0, 0, 221, 2, 0, 0, 0, 0, 0, 14, 67, 0, 0, 0, 0, 0, 0, 0, 232, 2, 0, 0, 0, 0,
        0, 14, 65, 0, 0, 0, 0, 0, 0, 0, 246, 2, 0, 0, 0, 0, 0, 14, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 64, 0, 0, 0, 4, 0, 0, 0, 35, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0,
        14, 71, 0, 0, 0, 0, 0, 0, 0, 32, 3, 0, 0, 0, 0, 0, 14, 71, 0, 0, 0, 0, 0, 0, 0, 63, 3, 0,
        0, 0, 0, 0, 7, 0, 0, 0, 0, 72, 3, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 255, 8, 0, 0, 1, 0, 0, 15,
        4, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 9, 0, 0, 3, 0, 0, 15, 64, 0, 0, 0, 12,
        0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 24, 0, 0, 0, 24, 0, 0, 0, 48,
        0, 0, 0, 16, 0, 0, 0, 13, 9, 0, 0, 6, 0, 0, 15, 253, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 47,
        0, 0, 0, 68, 0, 0, 0, 47, 0, 0, 0, 42, 0, 0, 0, 69, 0, 0, 0, 89, 0, 0, 0, 47, 0, 0, 0, 70,
        0, 0, 0, 136, 0, 0, 0, 47, 0, 0, 0, 72, 0, 0, 0, 183, 0, 0, 0, 35, 0, 0, 0, 73, 0, 0, 0,
        218, 0, 0, 0, 35, 0, 0, 0, 0, 105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90,
        69, 95, 84, 89, 80, 69, 95, 95, 0, 117, 51, 50, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115,
        105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 116, 121, 112, 101, 0, 118, 97, 108, 117,
        101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 98, 108, 95, 104, 111, 115,
        116, 110, 97, 109, 101, 115, 0, 112, 105, 110, 110, 105, 110, 103, 0, 100, 110, 115, 95,
        101, 118, 101, 110, 116, 115, 0, 108, 111, 103, 95, 111, 117, 116, 112, 117, 116, 0, 95,
        95, 115, 107, 95, 98, 117, 102, 102, 0, 108, 101, 110, 0, 112, 107, 116, 95, 116, 121, 112,
        101, 0, 109, 97, 114, 107, 0, 113, 117, 101, 117, 101, 95, 109, 97, 112, 112, 105, 110,
        103, 0, 112, 114, 111, 116, 111, 99, 111, 108, 0, 118, 108, 97, 110, 95, 112, 114, 101,
        115, 101, 110, 116, 0, 118, 108, 97, 110, 95, 116, 99, 105, 0, 118, 108, 97, 110, 95, 112,
        114, 111, 116, 111, 0, 112, 114, 105, 111, 114, 105, 116, 121, 0, 105, 110, 103, 114, 101,
        115, 115, 95, 105, 102, 105, 110, 100, 101, 120, 0, 105, 102, 105, 110, 100, 101, 120, 0,
        116, 99, 95, 105, 110, 100, 101, 120, 0, 99, 98, 0, 104, 97, 115, 104, 0, 116, 99, 95, 99,
        108, 97, 115, 115, 105, 100, 0, 100, 97, 116, 97, 0, 100, 97, 116, 97, 95, 101, 110, 100,
        0, 110, 97, 112, 105, 95, 105, 100, 0, 102, 97, 109, 105, 108, 121, 0, 114, 101, 109, 111,
        116, 101, 95, 105, 112, 52, 0, 108, 111, 99, 97, 108, 95, 105, 112, 52, 0, 114, 101, 109,
        111, 116, 101, 95, 105, 112, 54, 0, 108, 111, 99, 97, 108, 95, 105, 112, 54, 0, 114, 101,
        109, 111, 116, 101, 95, 112, 111, 114, 116, 0, 108, 111, 99, 97, 108, 95, 112, 111, 114,
        116, 0, 100, 97, 116, 97, 95, 109, 101, 116, 97, 0, 116, 115, 116, 97, 109, 112, 0, 119,
        105, 114, 101, 95, 108, 101, 110, 0, 103, 115, 111, 95, 115, 101, 103, 115, 0, 103, 115,
        111, 95, 115, 105, 122, 101, 0, 116, 115, 116, 97, 109, 112, 95, 116, 121, 112, 101, 0,
        104, 119, 116, 115, 116, 97, 109, 112, 0, 102, 108, 111, 119, 95, 107, 101, 121, 115, 0,
        95, 95, 117, 54, 52, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32,
        108, 111, 110, 103, 0, 115, 107, 0, 95, 95, 117, 56, 0, 117, 110, 115, 105, 103, 110, 101,
        100, 32, 99, 104, 97, 114, 0, 115, 107, 98, 0, 100, 110, 115, 0, 101, 116, 104, 104, 100,
        114, 0, 104, 95, 100, 101, 115, 116, 0, 104, 95, 115, 111, 117, 114, 99, 101, 0, 104, 95,
        112, 114, 111, 116, 111, 0, 95, 95, 98, 101, 49, 54, 0, 95, 95, 117, 49, 54, 0, 117, 110,
        115, 105, 103, 110, 101, 100, 32, 115, 104, 111, 114, 116, 0, 105, 112, 104, 100, 114, 0,
        105, 104, 108, 0, 118, 101, 114, 115, 105, 111, 110, 0, 116, 111, 115, 0, 116, 111, 116,
        95, 108, 101, 110, 0, 105, 100, 0, 102, 114, 97, 103, 95, 111, 102, 102, 0, 116, 116, 108,
        0, 99, 104, 101, 99, 107, 0, 95, 95, 115, 117, 109, 49, 54, 0, 97, 100, 100, 114, 115, 0,
        115, 97, 100, 100, 114, 0, 100, 97, 100, 100, 114, 0, 95, 95, 98, 101, 51, 50, 0, 117, 100,
        112, 104, 100, 114, 0, 115, 111, 117, 114, 99, 101, 0, 100, 101, 115, 116, 0, 99, 117, 114,
        115, 111, 114, 0, 112, 111, 115, 0, 101, 110, 100, 0, 100, 110, 115, 95, 101, 118, 101,
        110, 116, 0, 112, 105, 100, 0, 104, 111, 115, 116, 110, 97, 109, 101, 0, 99, 104, 97, 114,
        0, 101, 118, 0, 95, 112, 97, 114, 115, 101, 95, 100, 110, 115, 113, 95, 104, 111, 115, 116,
        110, 97, 109, 101, 0, 76, 73, 67, 69, 78, 83, 69, 0, 100, 110, 115, 46, 95, 95, 95, 95,
        102, 109, 116, 0, 100, 110, 115, 46, 95, 95, 95, 102, 109, 116, 0, 100, 110, 115, 46, 95,
        95, 95, 95, 102, 109, 116, 46, 49, 0, 100, 110, 115, 46, 95, 95, 95, 102, 109, 116, 46, 50,
        0, 95, 112, 97, 114, 115, 101, 95, 100, 110, 115, 113, 95, 104, 111, 115, 116, 110, 97,
        109, 101, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 112, 97, 114, 115, 101, 95, 100, 110,
        115, 113, 95, 104, 111, 115, 116, 110, 97, 109, 101, 46, 95, 95, 95, 95, 102, 109, 116, 46,
        51, 0, 98, 112, 102, 95, 115, 111, 99, 107, 0, 98, 112, 102, 95, 102, 108, 111, 119, 95,
        107, 101, 121, 115, 0, 47, 104, 111, 109, 101, 47, 98, 97, 114, 116, 47, 80, 114, 111, 106,
        101, 99, 116, 115, 47, 100, 110, 115, 109, 111, 110, 45, 114, 115, 47, 115, 114, 99, 47,
        98, 112, 102, 47, 112, 97, 114, 115, 101, 114, 115, 46, 99, 0, 80, 65, 82, 83, 69, 95, 70,
        85, 78, 67, 95, 68, 69, 67, 76, 65, 82, 65, 84, 73, 79, 78, 40, 101, 116, 104, 104, 100,
        114, 41, 0, 47, 104, 111, 109, 101, 47, 98, 97, 114, 116, 47, 80, 114, 111, 106, 101, 99,
        116, 115, 47, 100, 110, 115, 109, 111, 110, 45, 114, 115, 47, 115, 114, 99, 47, 98, 112,
        102, 47, 99, 117, 114, 115, 111, 114, 46, 104, 0, 32, 32, 32, 32, 32, 32, 32, 32, 46, 101,
        110, 100, 32, 61, 32, 40, 118, 111, 105, 100, 42, 41, 40, 108, 111, 110, 103, 41, 98, 117,
        102, 102, 45, 62, 100, 97, 116, 97, 95, 101, 110, 100, 44, 0, 32, 32, 32, 32, 114, 101,
        116, 117, 114, 110, 32, 40, 99, 117, 114, 115, 111, 114, 41, 32, 123, 0, 47, 104, 111, 109,
        101, 47, 98, 97, 114, 116, 47, 80, 114, 111, 106, 101, 99, 116, 115, 47, 100, 110, 115,
        109, 111, 110, 45, 114, 115, 47, 115, 114, 99, 47, 98, 112, 102, 47, 100, 110, 115, 46, 98,
        112, 102, 46, 99, 0, 32, 32, 32, 32, 105, 102, 32, 40, 98, 112, 102, 95, 110, 116, 111,
        104, 115, 40, 101, 116, 104, 104, 100, 114, 45, 62, 104, 95, 112, 114, 111, 116, 111, 41,
        32, 33, 61, 32, 73, 80, 86, 52, 41, 32, 123, 0, 80, 65, 82, 83, 69, 95, 70, 85, 78, 67, 95,
        68, 69, 67, 76, 65, 82, 65, 84, 73, 79, 78, 40, 105, 112, 104, 100, 114, 41, 0, 32, 32, 32,
        32, 105, 102, 32, 40, 105, 112, 45, 62, 112, 114, 111, 116, 111, 99, 111, 108, 32, 33, 61,
        32, 73, 80, 80, 82, 79, 84, 79, 95, 85, 68, 80, 41, 32, 123, 0, 80, 65, 82, 83, 69, 95, 70,
        85, 78, 67, 95, 68, 69, 67, 76, 65, 82, 65, 84, 73, 79, 78, 40, 117, 100, 112, 104, 100,
        114, 41, 0, 32, 32, 32, 32, 105, 102, 32, 40, 98, 112, 102, 95, 110, 116, 111, 104, 115,
        40, 117, 100, 112, 45, 62, 100, 101, 115, 116, 41, 32, 33, 61, 32, 53, 51, 41, 32, 123, 0,
        80, 65, 82, 83, 69, 95, 70, 85, 78, 67, 95, 68, 69, 67, 76, 65, 82, 65, 84, 73, 79, 78, 40,
        100, 110, 115, 104, 100, 114, 41, 0, 32, 32, 32, 32, 105, 102, 32, 40, 33, 40, 100, 110,
        115, 32, 61, 32, 112, 97, 114, 115, 101, 95, 100, 110, 115, 104, 100, 114, 40, 38, 99, 117,
        114, 115, 111, 114, 41, 41, 41, 32, 123, 0, 32, 32, 32, 32, 105, 102, 32, 40, 100, 110,
        115, 45, 62, 113, 114, 32, 33, 61, 32, 68, 78, 83, 95, 81, 85, 69, 82, 89, 41, 32, 123, 0,
        32, 32, 32, 32, 105, 102, 32, 40, 98, 112, 102, 95, 104, 116, 111, 110, 115, 40, 100, 110,
        115, 45, 62, 113, 100, 99, 111, 117, 110, 116, 41, 32, 60, 61, 32, 48, 41, 32, 123, 0, 32,
        32, 32, 32, 100, 110, 115, 95, 101, 118, 101, 110, 116, 32, 101, 118, 32, 61, 32, 123, 32,
        46, 112, 105, 100, 32, 61, 32, 49, 32, 125, 59, 0, 32, 32, 32, 32, 95, 95, 117, 51, 50, 32,
        104, 97, 115, 104, 32, 61, 32, 48, 59, 0, 32, 32, 32, 32, 95, 95, 117, 51, 50, 32, 104,
        111, 115, 116, 110, 97, 109, 101, 95, 108, 101, 110, 103, 116, 104, 32, 61, 32, 95, 112,
        97, 114, 115, 101, 95, 100, 110, 115, 113, 95, 104, 111, 115, 116, 110, 97, 109, 101, 40,
        38, 99, 117, 114, 115, 111, 114, 44, 32, 38, 101, 118, 44, 32, 38, 104, 97, 115, 104, 41,
        59, 0, 32, 32, 32, 32, 105, 102, 32, 40, 104, 111, 115, 116, 110, 97, 109, 101, 95, 108,
        101, 110, 103, 116, 104, 32, 61, 61, 32, 45, 49, 41, 32, 123, 0, 32, 32, 32, 32, 105, 102,
        32, 40, 98, 112, 102, 95, 109, 97, 112, 95, 112, 101, 101, 107, 95, 101, 108, 101, 109, 40,
        38, 98, 108, 95, 104, 111, 115, 116, 110, 97, 109, 101, 115, 44, 32, 38, 104, 97, 115, 104,
        41, 32, 33, 61, 32, 48, 41, 32, 123, 0, 32, 32, 32, 32, 105, 102, 32, 40, 98, 112, 102, 95,
        114, 105, 110, 103, 98, 117, 102, 95, 111, 117, 116, 112, 117, 116, 40, 38, 100, 110, 115,
        95, 101, 118, 101, 110, 116, 115, 44, 32, 38, 101, 118, 44, 32, 115, 105, 122, 101, 111,
        102, 40, 101, 118, 41, 44, 32, 48, 41, 32, 60, 32, 48, 41, 32, 123, 0, 32, 32, 32, 32, 32,
        32, 32, 32, 108, 111, 103, 95, 102, 109, 116, 40, 34, 70, 97, 105, 108, 101, 100, 32, 115,
        101, 110, 100, 105, 110, 103, 32, 104, 111, 115, 116, 110, 97, 109, 101, 32, 116, 111, 32,
        117, 115, 101, 114, 32, 115, 112, 97, 99, 101, 32, 37, 115, 33, 34, 44, 32, 101, 118, 46,
        104, 111, 115, 116, 110, 97, 109, 101, 41, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 108, 111,
        103, 95, 102, 109, 116, 40, 34, 83, 117, 99, 99, 101, 115, 102, 117, 108, 108, 121, 32,
        115, 101, 110, 116, 32, 104, 111, 115, 116, 110, 97, 109, 101, 32, 116, 111, 32, 99, 111,
        110, 116, 114, 111, 108, 32, 112, 108, 97, 110, 101, 59, 32, 37, 115, 34, 44, 32, 101, 118,
        46, 104, 111, 115, 116, 110, 97, 109, 101, 41, 59, 0, 125, 0, 32, 32, 32, 32, 99, 104, 101,
        99, 107, 95, 112, 97, 99, 107, 101, 116, 95, 98, 111, 117, 110, 100, 97, 114, 121, 40, 49,
        41, 59, 0, 32, 32, 32, 32, 42, 104, 97, 115, 104, 32, 61, 32, 70, 78, 86, 95, 111, 102,
        102, 115, 101, 116, 95, 98, 97, 115, 105, 115, 59, 0, 32, 32, 32, 32, 95, 95, 117, 51, 50,
        32, 110, 95, 99, 104, 97, 114, 115, 32, 61, 32, 42, 40, 99, 104, 97, 114, 42, 41, 40, 99,
        117, 114, 115, 111, 114, 45, 62, 112, 111, 115, 43, 43, 41, 59, 0, 32, 32, 32, 32, 102,
        111, 114, 32, 40, 95, 95, 117, 51, 50, 32, 105, 32, 61, 32, 48, 59, 32, 105, 32, 60, 32,
        77, 65, 88, 95, 72, 79, 83, 84, 78, 65, 77, 69, 95, 76, 69, 78, 59, 32, 105, 43, 43, 41,
        32, 123, 0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 42, 40, 99, 104, 97, 114, 42,
        41, 40, 99, 117, 114, 115, 111, 114, 45, 62, 112, 111, 115, 41, 32, 61, 61, 32, 48, 41, 32,
        123, 0, 32, 32, 32, 32, 32, 32, 32, 32, 99, 104, 97, 114, 32, 99, 104, 32, 61, 32, 42, 40,
        99, 104, 97, 114, 42, 41, 40, 99, 117, 114, 115, 111, 114, 45, 62, 112, 111, 115, 43, 43,
        41, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 40, 110, 95, 99, 104, 97, 114,
        115, 32, 61, 61, 32, 48, 41, 32, 123, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
        101, 118, 45, 62, 104, 111, 115, 116, 110, 97, 109, 101, 91, 105, 93, 32, 61, 32, 39, 46,
        39, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 95, 99, 104, 97, 114, 115,
        32, 61, 32, 99, 104, 59, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 101, 118, 45,
        62, 104, 111, 115, 116, 110, 97, 109, 101, 91, 105, 93, 32, 61, 32, 99, 104, 59, 0, 32, 32,
        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 95, 99, 104, 97, 114, 115, 45, 45, 59, 0, 32,
        32, 32, 32, 32, 32, 32, 32, 99, 104, 101, 99, 107, 95, 112, 97, 99, 107, 101, 116, 95, 98,
        111, 117, 110, 100, 97, 114, 121, 40, 49, 41, 59, 0, 48, 58, 49, 53, 0, 48, 58, 49, 54, 0,
        48, 58, 50, 0, 48, 58, 55, 0, 48, 58, 49, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109,
        97, 112, 115, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 116, 101, 120, 116, 0, 116, 99, 0,
        0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 36, 0, 0, 0, 100, 4, 0, 0, 136,
        4, 0, 0, 92, 0, 0, 0, 8, 0, 0, 0, 21, 9, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 27, 9,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 16, 0, 0, 0, 21, 9, 0, 0, 26, 0, 0, 0, 0, 0, 0,
        0, 22, 4, 0, 0, 68, 7, 0, 0, 5, 252, 0, 0, 32, 0, 0, 0, 22, 4, 0, 0, 68, 7, 0, 0, 5, 252,
        0, 0, 40, 0, 0, 0, 22, 4, 0, 0, 68, 7, 0, 0, 5, 252, 0, 0, 80, 0, 0, 0, 22, 4, 0, 0, 98, 7,
        0, 0, 11, 8, 1, 0, 88, 0, 0, 0, 22, 4, 0, 0, 128, 7, 0, 0, 41, 20, 1, 0, 104, 0, 0, 0, 22,
        4, 0, 0, 173, 7, 0, 0, 5, 24, 1, 0, 112, 0, 0, 0, 22, 4, 0, 0, 128, 7, 0, 0, 21, 20, 1, 0,
        144, 0, 0, 0, 22, 4, 0, 0, 224, 7, 0, 0, 13, 36, 1, 0, 152, 0, 0, 0, 22, 4, 0, 0, 224, 7,
        0, 0, 13, 36, 1, 0, 160, 0, 0, 0, 22, 4, 0, 0, 10, 8, 0, 0, 39, 52, 1, 0, 168, 0, 0, 0, 22,
        4, 0, 0, 53, 8, 0, 0, 13, 56, 1, 0, 184, 0, 0, 0, 22, 4, 0, 0, 10, 8, 0, 0, 19, 52, 1, 0,
        192, 0, 0, 0, 22, 4, 0, 0, 53, 8, 0, 0, 21, 56, 1, 0, 216, 0, 0, 0, 22, 4, 0, 0, 53, 8, 0,
        0, 13, 56, 1, 0, 232, 0, 0, 0, 22, 4, 0, 0, 81, 8, 0, 0, 29, 64, 1, 0, 240, 0, 0, 0, 22, 4,
        0, 0, 116, 8, 0, 0, 23, 60, 1, 0, 16, 1, 0, 0, 22, 4, 0, 0, 142, 8, 0, 0, 29, 84, 1, 0, 24,
        1, 0, 0, 22, 4, 0, 0, 176, 8, 0, 0, 20, 80, 1, 0, 40, 1, 0, 0, 22, 4, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 88, 1, 0, 0, 22, 4, 0, 0, 173, 7, 0, 0, 46, 24, 1, 0, 96, 1, 0, 0, 22, 4, 0, 0,
        173, 7, 0, 0, 5, 24, 1, 0, 104, 1, 0, 0, 22, 4, 0, 0, 199, 8, 0, 0, 9, 28, 1, 0, 136, 1, 0,
        0, 22, 4, 0, 0, 199, 8, 0, 0, 9, 28, 1, 0, 144, 1, 0, 0, 22, 4, 0, 0, 199, 8, 0, 0, 9, 28,
        1, 0, 160, 1, 0, 0, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 1, 0, 0, 22, 4, 0, 0, 66, 7,
        0, 0, 1, 108, 1, 0, 27, 9, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 86, 3, 0, 0, 134, 3, 0, 0, 1, 80,
        0, 0, 8, 0, 0, 0, 165, 3, 0, 0, 212, 3, 0, 0, 35, 92, 0, 0, 16, 0, 0, 0, 165, 3, 0, 0, 0,
        4, 0, 0, 21, 88, 0, 0, 24, 0, 0, 0, 86, 3, 0, 0, 134, 3, 0, 0, 1, 80, 0, 0, 40, 0, 0, 0,
        86, 3, 0, 0, 134, 3, 0, 0, 1, 80, 0, 0, 56, 0, 0, 0, 22, 4, 0, 0, 70, 4, 0, 0, 9, 156, 1,
        0, 64, 0, 0, 0, 22, 4, 0, 0, 70, 4, 0, 0, 9, 156, 1, 0, 72, 0, 0, 0, 86, 3, 0, 0, 116, 4,
        0, 0, 1, 84, 0, 0, 88, 0, 0, 0, 86, 3, 0, 0, 116, 4, 0, 0, 1, 84, 0, 0, 104, 0, 0, 0, 22,
        4, 0, 0, 146, 4, 0, 0, 13, 192, 1, 0, 112, 0, 0, 0, 22, 4, 0, 0, 146, 4, 0, 0, 9, 192, 1,
        0, 120, 0, 0, 0, 86, 3, 0, 0, 185, 4, 0, 0, 1, 92, 0, 0, 136, 0, 0, 0, 86, 3, 0, 0, 185, 4,
        0, 0, 1, 92, 0, 0, 152, 0, 0, 0, 22, 4, 0, 0, 216, 4, 0, 0, 9, 232, 1, 0, 160, 0, 0, 0, 22,
        4, 0, 0, 216, 4, 0, 0, 9, 232, 1, 0, 168, 0, 0, 0, 22, 4, 0, 0, 254, 4, 0, 0, 1, 168, 0, 0,
        184, 0, 0, 0, 22, 4, 0, 0, 254, 4, 0, 0, 1, 168, 0, 0, 200, 0, 0, 0, 22, 4, 0, 0, 29, 5, 0,
        0, 9, 252, 1, 0, 208, 0, 0, 0, 22, 4, 0, 0, 71, 5, 0, 0, 14, 12, 2, 0, 216, 0, 0, 0, 22, 4,
        0, 0, 71, 5, 0, 0, 17, 12, 2, 0, 224, 0, 0, 0, 22, 4, 0, 0, 71, 5, 0, 0, 9, 12, 2, 0, 232,
        0, 0, 0, 22, 4, 0, 0, 103, 5, 0, 0, 9, 24, 2, 0, 8, 1, 0, 0, 22, 4, 0, 0, 103, 5, 0, 0, 9,
        24, 2, 0, 24, 1, 0, 0, 22, 4, 0, 0, 143, 5, 0, 0, 15, 40, 2, 0, 40, 3, 0, 0, 22, 4, 0, 0,
        176, 5, 0, 0, 11, 48, 2, 0, 56, 3, 0, 0, 22, 4, 0, 0, 143, 5, 0, 0, 15, 40, 2, 0, 96, 3, 0,
        0, 22, 4, 0, 0, 196, 5, 0, 0, 29, 52, 2, 0, 136, 3, 0, 0, 22, 4, 0, 0, 11, 6, 0, 0, 9, 56,
        2, 0, 152, 3, 0, 0, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 22, 4, 0, 0, 44, 6,
        0, 0, 9, 72, 2, 0, 184, 3, 0, 0, 22, 4, 0, 0, 44, 6, 0, 0, 9, 72, 2, 0, 200, 3, 0, 0, 22,
        4, 0, 0, 100, 6, 0, 0, 9, 88, 2, 0, 0, 4, 0, 0, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 4,
        0, 0, 22, 4, 0, 0, 100, 6, 0, 0, 9, 88, 2, 0, 56, 4, 0, 0, 22, 4, 0, 0, 167, 6, 0, 0, 9,
        92, 2, 0, 64, 4, 0, 0, 22, 4, 0, 0, 167, 6, 0, 0, 9, 92, 2, 0, 88, 4, 0, 0, 22, 4, 0, 0,
        242, 6, 0, 0, 9, 100, 2, 0, 96, 4, 0, 0, 22, 4, 0, 0, 242, 6, 0, 0, 9, 100, 2, 0, 112, 4,
        0, 0, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 4, 0, 0, 22, 4, 0, 0, 242, 6, 0, 0, 9, 100,
        2, 0, 216, 4, 0, 0, 22, 4, 0, 0, 167, 6, 0, 0, 9, 92, 2, 0, 32, 5, 0, 0, 22, 4, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 72, 5, 0, 0, 22, 4, 0, 0, 66, 7, 0, 0, 1, 116, 2, 0, 16, 0, 0, 0, 27, 9,
        0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 233, 8, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 26, 0, 0,
        0, 238, 8, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 39, 0, 0, 0, 243, 8, 0, 0, 0, 0, 0, 0, 104, 0, 0,
        0, 44, 0, 0, 0, 247, 8, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 49, 0, 0, 0, 251, 8, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 118, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 184, 1, 0, 0, 0, 0, 0, 0, 232, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 4, 0, 0, 0, 0, 0, 0, 216, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 1, 0,
        0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 6, 0, 0, 0, 0, 0, 0, 88, 5, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26,
        0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 11, 0, 0, 0, 0,
        0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 34, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216,
        11, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 24, 12, 0, 0, 0, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 1, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 24, 13, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3,
        0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 97, 1, 0, 0, 9, 0, 0, 0, 64, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 13, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0,
        0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 104, 1, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 13, 0, 0, 0, 0, 0, 0, 158,
        17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 109, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 31, 0, 0,
        0, 0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
    ];
}
